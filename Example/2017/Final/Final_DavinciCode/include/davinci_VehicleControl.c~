#if 0
/*
*	Embeded Software Contest 2017
*	Davinci Code : Vehicle Control part
*	Copyright (c) 2017, Heremes Team. All rights reserved.
*/
#endif	/* Copyright */

#if 1
#include "car_lib.h"
#include "davinci_VehicleControl.h"
#endif	/* header import */

#define CHECKPRINT

#if 1
volatile int flag_t = 0;
volatile _Bool Hill_Deteced = 0;
volatile unsigned short sum_direction = 1500;

int prevlineState=0;
int prevlineCount=0;

void my_sleep(int s)
{
	sleep(s);
}

/* Vehicle Initialization */
void vehicleInit(void)
{
	CarControlInit();
	printf("Vehicle Initialization Complete!");
	DistanceParameterInit();
	SteeringServoControl_Write(ANGLE_MID);
	setVehicleSpeedPIDGain(GAIN_P, GAIN_I, GAIN_D);
	setVehicleEncoderPIDGain(GAIN_POS_P);
	setVehicleSpeed(STOP_SPEED);

	m_central = -(ANGLE_MID-R_CENTRAL_MAX)/N_CENTRAL_MAX; 
	
	//m_curve = (R_CENTRAL_MAX-500.0)/(100.0-N_CENTRAL_MAX); 

	//y_right = 1000 - m_curve*100;
	//y_left = 2000 + m_curve*100; 

	CameraXServoControl_Write(CAMERA_X_ANGLE_NORMAL);	
	CameraYServoControl_Write(CAMERA_Y_ANGLE_NORMAL);
	CarLight_Write(ALL_OFF);
	Winker_Write(ALL_OFF);
}

/* Vehicle Emergency Stop */
void vehicleStop(void)
{
	PositionControlOnOff_Write(UNCONTROL);
	SpeedControlOnOff_Write(CONTROL);
	SteeringServoControl_Write(ANGLE_MID);
	DesireSpeed_Write(STOP_SPEED);
	SpeedControlOnOff_Write(UNCONTROL);
	
	vehicle_stop_state = 1;
/*	if (start_state)
	{
		CarLight_Write(ALL_ON);
		Winker_Write(ALL_ON);
	}
	else 
	{
		CarLight_Write(ALL_OFF);
		Winker_Write(ALL_OFF);
	}
*/	flag_t = 1;
	printf("Vehicle has been stopped!\n\n");
}

/* Make Buzzer Ring */
void BuzzerRing(int num, unsigned int delay_ms) 
{
	while (num--)
	{
		Alarm_Write(ON);
		usleep(delay_ms * 1000);
		Alarm_Write(OFF);
		if (num != 0) usleep(delay_ms * 1000);
	}
}

/* Vehicle Speed PID Setting */
void setVehicleSpeedPIDGain(int p_gain, int i_gain, int d_gain) 
{
	PositionControlOnOff_Write(UNCONTROL);
	SpeedControlOnOff_Write(CONTROL);
	SpeedPIDProportional_Write(p_gain);
	SpeedPIDIntegral_Write(i_gain);
	SpeedPIDDifferential_Write(d_gain);
	SpeedControlOnOff_Write(UNCONTROL);
}

/* Vehicle EncoderCount PID Setting */
void setVehicleEncoderPIDGain(int p_pos_gain)
{
	SpeedControlOnOff_Write(CONTROL);
	PositionControlOnOff_Write(CONTROL);
	PositionProportionPoint_Write(p_pos_gain);
	PositionControlOnOff_Write(UNCONTROL);
}

/* Vehicle Speed Setting */
void setVehicleSpeed(int speed) 
{
	SpeedControlOnOff_Write(CONTROL);
	DesireSpeed_Write(speed);
}

/* Vehicle Direction Setting */
void setVehicleDirection(float movfactor) // left -100 ~ 100 right 
{
	movfactor = movfactor > 100.0 ? 100.0 : movfactor < -100.0 ? -100.0 : movfactor;
	int direction = -5.0 *movfactor + 1525.0;
	if(direction>2000) direction = 2000;
	if(direction<1000) direction = 1000;
	SteeringServoControl_Write(direction);
}

void setVehicleDirection_Value(unsigned int direction) // left 1000 ~ 2000 right 
{
	direction = direction > 2000 ? 2000 : direction < 1000 ? 1000 : direction;
	SteeringServoControl_Write(direction);
}


/* Vehicle Move Control with Time Setting */
void runtimeCotrol(int speed, int ms)
{
	int time = ms * 1000;

	SpeedControlOnOff_Write(CONTROL);
	DesireSpeed_Write(speed);
	usleep(time);
	DesireSpeed_Write(STOP_SPEED);
	SpeedControlOnOff_Write(UNCONTROL);
}

/* Vehicle Move Control with Distance Setting */
void positionControl(int speed, float cm)
{
	if (cm < 0) speed = -speed;
	if (speed < 0) cm = -cm;

	short encoderCount = (short)(20 * cm);
	short tolerance = 20;
	short prior_EncoderCount = 0;
	short cnt = 0;

	SpeedControlOnOff_Write(CONTROL);
	DesireSpeed_Write(speed);
	PositionControlOnOff_Write(CONTROL);
	EncoderCounter_Write(0); // Counter Initialization

	DesireEncoderCount_Write(encoderCount);
	while (abs(DesireEncoderCount_Read()) > tolerance) {
		if(prior_EncoderCount == DesireEncoderCount_Read()) cnt++;
		else cnt = 0;
		prior_EncoderCount = DesireEncoderCount_Read();
		if (cnt > 5) break;
	}

	DesireSpeed_Write(STOP_SPEED);
	PositionControlOnOff_Write(UNCONTROL);
	SpeedControlOnOff_Write(UNCONTROL);
}

unsigned int speed_RUT[201] = 
	{
	//-100						      //-91
	2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
	//-90						      //-81
	2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
	//-80						      //-71
	1950, 1950, 1950, 1900, 1900, 1900, 1900, 1900, 1900, 1900,
	//-70						      //-61
	1900, 1850, 1850, 1850, 1800, 1800, 1750, 1700, 1700, 1700,
	//-60						      //-51
	1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
	//-50						      //-41
	1650, 1650, 1650, 1650, 1650, 1600, 1600, 1600, 1600, 1600,
	//-40						      //-31
	1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
	//-30						      //-21
	1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
	//-20						      //-11
	1600, 1600, 1580, 1580, 1550, 1550, 1550, 1550, 1550, 1550,
	//-10						      //-1
	1550, 1540, 1520, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
					
				// 0
				1500,
	//1						      //10
	1500, 1500, 1500, 1500, 1500, 1500, 1500, 1480, 1460, 1450,
	//11						      //20
	1450, 1450, 1450, 1450, 1450, 1450, 1420, 1420, 1400, 1400,
	//21						      //30
	1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
	//31						      //40
	1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
	//41						      //50
	1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
	//51						      //60
	1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
	//61						      //70
	1300, 1300, 1300, 1250, 1200, 1200, 1150, 1150, 1150, 1100,
	//71						      //80
	1100, 1100, 1100, 1100, 1100, 1100, 1100, 1050, 1050, 1050,
	//81						      //90
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
	//91						      //100
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000
	};
//--------------------------------------------------------------------------------------------------------------------------
/* Vehicle Direction Control using Vanishing Point */
void directionControl(int targetX)
{
	double movfactor = 0;
	//SteeringServoControl_Write(direction);

	movfactor = (targetX - MID_X) * 100.0 / HALF_LENGTH;
	movfactor = movfactor > 100.0 ? 100.0 : movfactor < -100.0 ? -100.0 : movfactor;

	unsigned int direction_index = 100 + (int)movfactor;
	
	printf("TargetX : %d\t movefactor : %f\n",targetX, movfactor);
	SteeringServoControl_Write(speed_RUT[direction_index]);
}


/* Vehicle Speed Control by Situation */
void speedControl() 
{
	//CarLight_Write(FRONT_ON);
	//Winker_Write(ALL_OFF);


		if (lane_detect_state)
		{
			/*if(sequence == 1 && obs_detect_state[0] == 1 && !Misson_HillDrive_Done && ACC_ENABLED) 			
			{
				reset_Mtimer = 1;
				printf("Hill Detected!\n");
				setVehicleSpeed(SPEED_HILL_ASC);
				Hill_Deteced = 1;
			}
			else if(Hill_Deteced == 1 && my_timer < HILL_DSC_TIME_100MS) 
			{
//				setVehicleSpeed(SPEED_DOWN);
				if(!Misson_HillDrive_Done) Misson_HillDrive_Done = 1;
			}
			else if( my_timer > HILL_ACC_TIME_100MS)
			{*/
				if(sequence == 3 && rotary_entered_state && !Misson_RotaryDrive_Done)
				{
					if(my_timer > ROTARY_EXCAPE_TIME_100MS) Misson_RotaryDrive_Done = 1;

					if(obs_detect_state[3] == 1)
					{	
						setVehicleSpeed(SPEED_UP);						
					}
					else if(obs_detect_state[0] ==1 || obs_detect_state[5] ==1)
					{
						setVehicleSpeed(SPEED_DOWN);
					}
					else
					{	
						if (lane_detect_state >= 5)
						{
							if(sequence == 1 || sequence == 8 || sequence == 0) {	setVehicleSpeed(START_SPEED);
/*
	if(obs_detect_state[0] && sequence ==1)
{

}
	else(setVehicleSpeed(START_SPEED);
}	
*/
							else setVehicleSpeed(NORMAL_SPEED);
						}
						else if (lane_detect_state >= 1)
						{
							if(sequence == 1 || sequence == 8) setVehicleSpeed(START_SPEED);
							else setVehicleSpeed(SAFE_SPEED);
						}
					}		
				}
				else
				{
						if (lane_detect_state >= 5)
						{
							if(sequence == 1 || sequence == 8 || sequence == 0) setVehicleSpeed(START_SPEED);
							else setVehicleSpeed(NORMAL_SPEED);
						}
						else if (lane_detect_state >= 1)
						{
							if(sequence == 1 || sequence == 8) setVehicleSpeed(START_SPEED);
							else setVehicleSpeed(SAFE_SPEED);
						}
				}
			//}
		}
		else
		{
			;
		}

	vehicle_stop_state = 0;
}


///////////////////////////////////////////////////////////////////////////////////////////////////


/* Covert Distance CM to Sensor Value */
int CvtcmToValue(int channel, int cm)
{
	int cmTovalue;
	switch (channel)
	{

	case 1 :
		cmTovalue = (int)(9479 * pow((double)cm, -0.7816));
		break;
	case 2:
		cmTovalue = (int)(10410 * pow((double)cm, -0.8091));
		break;
	case 3:
		cmTovalue = (int)(10580 * pow((double)cm, -0.7879));
		break;
	case 4:
		cmTovalue = (int)(9674 * pow((double)cm, -0.7637));
		break;
	case 5:
		cmTovalue = (int)(9935 * pow((double)cm, -0.7448));
		break;
	case 6:
		cmTovalue = (int)(9836 * pow((double)cm, -0.7231));
		break;

	default:
		printf("Invalid Channel number!");
		return -1;
	}
	if (cmTovalue > 4095 || cmTovalue < -1) cmTovalue = 4095;
	return cmTovalue;
}

/* Comparate Distance with CM (Auto Converting to Sensor Value) */
_Bool isCloserThanCM(int channel, int cm)
{
	int cmTovalue;
	switch (channel)
	{

	case 1 :
		cmTovalue = (int)(9479 * pow((double)cm, -0.7816));
		break;
	case 2:
		cmTovalue = (int)(10410 * pow((double)cm, -0.8091));
		break;
	case 3:
		cmTovalue = (int)(10580 * pow((double)cm, -0.7879));
		break;
	case 4:
		cmTovalue = (int)(9674 * pow((double)cm, -0.7637));
		break;
	case 5:
		cmTovalue = (int)(9935 * pow((double)cm, -0.7448));
		break;
	case 6:
		cmTovalue = (int)(9836 * pow((double)cm, -0.7231));
		break;
	default: 
		printf("Invalid Channel number!");
		return -1;
	}
	usleep(1); // For updating sensor state
	if (cmTovalue > 4095 || cmTovalue < -1) cmTovalue = 4095;
	return (char)(MeasuredDistance[channel-1] > cmTovalue);
}

/* Comparate Distance with Input Value */
_Bool isCloserThanValue(int channel, int value) 
{
	return (MeasuredDistance[channel - 1] > value);
}

/* Comp Distance with Valuses */  
_Bool isInBoundryValue(int channel, int value_min, int value_max) 
{
	return (MeasuredDistance[channel - 1] > value_min && MeasuredDistance[channel - 1] < value_max);
}


////////////////////////////////////////////////////////////////



/* Pre-Convertion of Distance Parameter for Multi-Threading */
void DistanceParameterInit() 
{
	ChDistanceParameter[1][0] = CvtcmToValue(1, ROTARY_DISTANCE);
	ChDistanceParameter[1][1] = CvtcmToValue(1, THREELANE_DISTANCE);

	ChDistanceParameter[4][0] = CvtcmToValue(6, ROTARY_DISTANCE);
	
	ChDistanceParameter[2][0] = CvtcmToValue(2, PARKPOST_DISTANCE);
	ChDistanceParameter[2][1] = CvtcmToValue(2, PARKPARALLEL_DISTANCE);
	ChDistanceParameter[2][2] = CvtcmToValue(2, PARKVERTICAL_DISTANCE);

	ChDistanceParameter[3][0] = CvtcmToValue(3, PARKPOST_DISTANCE);
	ChDistanceParameter[3][1] = CvtcmToValue(3, PARKPARALLEL_DISTANCE);
	ChDistanceParameter[3][2] = CvtcmToValue(3, PARKVERTICAL_DISTANCE);

	ChDistanceParameter[5][0] = CvtcmToValue(5, PARKPOST_DISTANCE);
	ChDistanceParameter[5][1] = CvtcmToValue(5, PARKPARALLEL_DISTANCE);
	ChDistanceParameter[5][2] = CvtcmToValue(5, PARKVERTICAL_DISTANCE);

	ChDistanceParameter[6][0] = CvtcmToValue(6, PARKPOST_DISTANCE);
	ChDistanceParameter[6][1] = CvtcmToValue(6, PARKPARALLEL_DISTANCE);
	ChDistanceParameter[6][2] = CvtcmToValue(6, PARKVERTICAL_DISTANCE);
#ifdef CHECKPRINT
	printf("Distance Parameter Initialization Complete! \n");
#endif
}


/* Update the Distance State from Distance Sensor */
void updateDistanceState()
{
	// For Low Overhead
	MeasuredDistance[0] = 0.6*MeasuredDistance[0] + 0.4*DistanceSensor(1);
	MeasuredDistance[1] = 0.6*MeasuredDistance[1] + 0.4*DistanceSensor(2);
	MeasuredDistance[2] = 0.6*MeasuredDistance[2] + 0.4*DistanceSensor(3);
	MeasuredDistance[3] = 0.6*MeasuredDistance[3] + 0.4*DistanceSensor(4);
	MeasuredDistance[4] = 0.6*MeasuredDistance[4] + 0.4*DistanceSensor(5);
	MeasuredDistance[5] = 0.6*MeasuredDistance[5] + 0.4*DistanceSensor(6);
	
	//int k;
	//for (k = 0; k < 6; k++) 
	//{
	//	MeasuredDistance[k] = DistanceSensor(k + 1);
	//}
}

/* Update the Distance State from Line Sensor */
void update_LineState() 
{
	int k;
	char cnt = 0;
	unsigned char MeasuredLineState = LineSensor_Read();
	for (k = 0; k < 7; k++)
	{
		if (!((MeasuredLineState >> k) & 0x01)) cnt++;
	}

	if (cnt >= STOPLINE_THRESHOLD) StopLine_detect_flag = 1;
	else StopLine_detect_flag = 0;
}



////////////////////////////////////////////////////////////////


/* Update parking signal state to detect parking lot */
void update_ParkingSignalSequenceState() 
{
	//---------------------------- for Right Front Check
	switch (rightParkingSequence[0])
	{
	case 0:
		if (isInBoundryValue(2, 600, 2000))
		{
			rightSequenceCnt[0][0]++;	// Post ++
		}
		if (rightSequenceCnt[0][0] >= PARKING_COUNT_THRESHOLD)
		{
			rightParkingSequence[0] = 1;
			rightSequenceCnt[0][0] = 0;
#ifdef CHECKPRINT
			printf("Right Front : Parking Post 1 Detected \n");
#endif
		}
		break;
	case 1:
		if (isInBoundryValue(2, 280, 550))
		{
				rightSequenceCnt[0][0]++;	// Parallel ++
		}
		if (rightSequenceCnt[0][0] >= PARKING_COUNT_THRESHOLD)
		{
			rightParkingSequence[0] = 2;
			rightSequenceCnt[0][0] = 0;
			rightSequenceCnt[0][1] = 0;
#ifdef CHECKPRINT
			printf("Right Front : Parking Depth Detected \n");
#endif
		}
		break;
	case 2:
		if (isInBoundryValue(2, 600, 2000) && rightParkingSequence[1] > 0)
		{
			rightSequenceCnt[0][0]++;	// Post ++
		}
		if (rightSequenceCnt[0][0] >= PARKING_COUNT_THRESHOLD)
		{
			rightParkingSequence[0] = 4;
			rightSequenceCnt[0][0] = 0;
#ifdef CHECKPRINT
			printf("Right Front : Parking Post 2 Detected \n");
#endif
		}
		break;
	case 4:
		; // Parking State 
		break;
	default:
		printf("Wrong State! \n");
	}

	//---------------------------- for Right Back Check
	switch (rightParkingSequence[1])
	{
	case 0:
		if (isInBoundryValue(3, 650, 2000) && rightParkingSequence[0] > 1)
		{
			rightSequenceCnt[1][0]++;	// Post ++
		}
		if (rightSequenceCnt[1][0] >= PARKING_COUNT_THRESHOLD)
		{
			rightParkingSequence[1] = 1;
			rightSequenceCnt[1][0] = 0;
#ifdef CHECKPRINT
			printf("Right Back : Parking Post 1 Detected \n");
#endif
		}
		break;
	case 1:
		if (isInBoundryValue(3, 280, 550) && rightParkingSequence[0] > 1)
		{

				rightSequenceCnt[1][0]++;	// Parallel ++

		}
		if (rightSequenceCnt[1][0] >= PARKING_COUNT_THRESHOLD)
		{
			rightParkingSequence[1] = 2;
			rightSequenceCnt[1][0] = 0;
			rightSequenceCnt[1][1] = 0;
#ifdef CHECKPRINT
			printf("Right Back : Parking Depth Detected \n");
#endif
		}
		break;
	case 2:
		if (isInBoundryValue(3, 650, 2000) && rightParkingSequence[0] > 3)
		{
			rightSequenceCnt[1][0]++;	// Post ++
		}
		if (rightSequenceCnt[1][0] >= PARKING_COUNT_THRESHOLD)
		{
			rightParkingSequence[1] = 4;
			rightSequenceCnt[1][0] = 0;
#ifdef CHECKPRINT
			printf("Right Back : Parking Post 2 Detected \n");
#endif
		}
		break;
	case 4:
		; // Parking State 
		break;
	default:
		printf("Wrong State! \n");
	}

	if (rightParkingSequence[0] >= 4 && rightParkingSequence[1] >= 4) 
	{
			ReadyToParking_flag = 1;
			rightParkingSequence[0] = 0;
			rightParkingSequence[1] = 0;

#ifdef CHECKPRINT
			printf("\n\nReady to Park !\n\n");
#endif
	}
#ifdef CHECKPRINT
	printf("sequence LF : %d \tsequence RF : %d \nsequence LB : %d \tsequence RB : %d \n",leftParkingSequence[0],rightParkingSequence[0],leftParkingSequence[1],rightParkingSequence[1] );
#endif
}

void reset_sequence()
{
	leftParkingSequence[0] = 0;
	leftParkingSequence[1] = 0;
	rightParkingSequence[0] = 0;
	rightParkingSequence[1] = 0;
}

/* Vertical Parking Sequence */
void parking_Vertical(int side) 
{
	BuzzerRing(2, PARKING_RING_DELAY);
	runtimeCotrol(0, 10);
	usleep(200000);
	if (side == 2)	// Right side
	{

		positionControl(-PARKING_SPEED, -5);
		usleep(200000);

		positionControl(-PARKING_SPEED, -12.5);
		usleep(200000);
		setVehicleDirection(100);
		usleep(200000);

		positionControl(-PARKING_SPEED, -60.5);
		setVehicleDirection(0);
		usleep(200000);

		setVehicleSpeed(-PARKING_SPEED);
		while (!isCloserThanCM(4, 10));
		runtimeCotrol(0, 10);
		BuzzerRing(1, 200);
		usleep(1000000);

		/*Reverse*/

		positionControl(PARKING_SPEED, 30);
		setVehicleDirection(100);
		usleep(200000);
		positionControl(PARKING_SPEED, 50.0);
	}
	else 
	{
		printf("Invalied Parking input! \n");
	}
}

/* Parallel Parking Sequence */
void parking_Parallel(int side) 
{
	BuzzerRing(2, PARKING_RING_DELAY);
	runtimeCotrol(0, 10);
	usleep(200000);
	if (side == 2)	// Right side
	{
		setVehicleDirection(0);
		positionControl(-PARKING_SPEED, -10);
		usleep(200000);

		setVehicleDirection(80);
		usleep(200000);

		positionControl(-PARKING_SPEED, -42);
		setVehicleDirection(0);
		usleep(200000);

		positionControl(-PARKING_SPEED, -18);
		setVehicleDirection(-100);
		usleep(200000);

		setVehicleSpeed(-PARKING_SPEED);
		while (!isCloserThanCM(4, 10));
		runtimeCotrol(0, 10);

		setVehicleDirection(0);
		BuzzerRing(1, 200);
		usleep(1000000);

		/*Reverse*/

		setVehicleSpeed(-PARKING_SPEED);
		while (!isCloserThanCM(4, 15));
		runtimeCotrol(0, 10);
		setVehicleDirection(-100);
		usleep(200000);
		positionControl(PARKING_SPEED, 40);
		setVehicleDirection(100);
		usleep(200000);
		positionControl(PARKING_SPEED, 50);
	}
	else
	{
		printf("Invalied Parking input! \n");
	}
}

/* Check the encoder count for parking */
void parking_Distance_Check()
{

	if (rightParkingSequence[0] == 1)
	{
		EncoderCounter_Write(0);
	}
	else if (rightParkingSequence[0] == 4)
	{
		leftParkingSequence[0] = 0;
		leftParkingSequence[1] = 0;
		signed int encoderCnt = EncoderCounter_Read();
		if (encoderCnt < 10000) VerticalParking_detect_flag = 2;
		else ParallelParking_detect_flag = 2;
	}

}
 

void Obstacle_Checking()
{
	// Sensor Detected Count
	if(sequence==1)
	{
		if(isInBoundryValue(1,350, 4095)) obs_cnt[0]++; //isCloserThanCM(1,HILL_DETECT_DISTANCE_CM)
		else{ --obs_cnt[0]; if(obs_cnt[0] < 0) obs_cnt[0] = 0;  }		
	} 
	else if(sequence==3) 
	{
		if(isCloserThanCM(1,10)) { obs_cnt[0]++; }
		else{ obs_cnt[0] -= 2; if(obs_cnt[0] < 0) obs_cnt[0] = 0; }
		if(isCloserThanCM(4,15)) obs_cnt[3]++;
		else{ obs_cnt[3] -= 2; if(obs_cnt[3] < 0) obs_cnt[3] = 0; }
		if(isCloserThanCM(6,15)) obs_cnt[5]++;
		else{ obs_cnt[5] -= 2; if(obs_cnt[5] < 0) obs_cnt[5] = 0; }
	}
	else if(sequence==4)
	{
		if(isCloserThanCM(1,20)) obs_cnt[0]++;
		else{ --obs_cnt[0]; if(obs_cnt[0] < 0) obs_cnt[0] = 0; }		
	}
	else 
	{
		obs_cnt[0] = 0;
		obs_cnt[1] = 0;
		obs_cnt[2] = 0;
		obs_cnt[3] = 0;
		obs_cnt[4] = 0;
		obs_cnt[5] = 0;
	}

	//printf("Checking the Obstacle...\n");

	// Sensor Detected Flag Update
	// Sensor 1
	if(obs_cnt[0] >= OBS_DETECT_THRESHOLD)
	{
		if(obs_cnt[0] > OBS_DETECT_THRESHOLD) obs_cnt[0] = OBS_DETECT_THRESHOLD;
		obs_detect_state[0] = 1;
	}
	else obs_detect_state[0] = 0;
	// Sensor 4
	if(obs_cnt[3] >= OBS_DETECT_THRESHOLD)
	{
		if(obs_cnt[3] > OBS_DETECT_THRESHOLD) obs_cnt[3] = OBS_DETECT_THRESHOLD;
		obs_detect_state[3] = 1;
	}
	else obs_detect_state[3] = 0;
	// Sensor 6
	if(obs_cnt[5] >= OBS_DETECT_THRESHOLD)
	{
		if(obs_cnt[5] > OBS_DETECT_THRESHOLD) obs_cnt[5] = OBS_DETECT_THRESHOLD;
		obs_detect_state[5] = 1;
	}
	else obs_detect_state[5] = 0;

	printf("ob1_cnt : %d\n",obs_cnt[0]);
	printf("ob1 : %d\n",obs_detect_state[0]);
}



// DaeWon
int checkDiff(IplImage *frame) 
{
	int diff = 0;
	int h, w;

	for (h = 0; h < frame->height; h++) 
	{
		for (w = 0; w < frame->width; w++) 
		{
			unsigned char p = frame->imageData[h*frame->height + w];
			int P = (int)p;
			if (P > 100) diff++;
		}
	}

	return diff;
}

/* Rrference Function */
//_Bool isCloserThanCM(int channel, int cm);
//void setVehicleDirection(float movfactor); // left -100 ~ 100 right 
//void positionControl(int speed, float cm);
//void runtimeCotrol(int speed, int ms);

#endif /* Fuction Description */

